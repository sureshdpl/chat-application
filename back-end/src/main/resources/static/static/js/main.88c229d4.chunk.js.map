{"version":3,"sources":["Componet/ThirdParty/ThirdParty.jsx","Componet/Login/Login.js","Componet/SignUp/SignUp.jsx","Store/StoreConstants.js","Store/Action/ChatsAction.js","Store/Action/LoginAction.js","Store/Action/SignUpAction.js","Store/Action/UserAction.jsx","Services/APIService.js","Utils/Constansts.jsx","Utils/CommonUtil.jsx","Componet/UtilsComponets/Wave.jsx","Componet/Chat/MiddleChat/ChatComponent.jsx","Componet/Chat/RightChat/UserProfile.jsx","Componet/Chat/RightChat/UsersComponent.jsx","Componet/UtilsComponets/UserOption.jsx","Componet/UtilsComponets/MultiSelect.jsx","Componet/Chat/LeftChat/CreateChatGroupComponet.jsx","Componet/Chat/LeftChat/UserChatComponet.jsx","Componet/UtilsComponets/DropDown.jsx","Componet/Chat/LeftChat/ChatLeftComponet.jsx","Container/Chat/ChatContainer.jsx","Container/MainContainer.jsx","App.js","Store/Reducer/ChatReducer.js","Store/index.js","Store/Reducer/LoginReducer.js","Store/Reducer/UsersReducer.js","Store/Reducer/ChatMessagesReducer.js","Store/ConfigureStore.js","index.js"],"names":["ThirdParty","props","useState","userId","firstName","lastName","signupForm","setSignupForm","googleLoginSuccess","googleResponse","profileObj","email","submitRequest","alert","clientId","buttonText","onSuccess","onFailure","cookiePolicy","Login","password","loginForm","setLoginForm","handleInputChange","e","target","name","value","className","type","onChange","onClick","console","log","signIn","SignUp","signUp","StoreConstants","fetchChatsFailed","faildMessage","messageSentSuccss","response","messageSentFailed","groupMessageSentFailed","fetchGroupChatsFailed","createGroupFailed","typingMessages","loginFailed","signUpFailed","fetchUsersFailed","API","SIGN_UP","BASE_URL","SIGN_IN","FETCH_USERS","SNED_MSG","FETCH_CHAT_MSGS","FETCH_CHATS","FETCH_GROUP_CHAT_MSGS","SNED_GROUP_MSG","CREATE_GROUP","SEND_TYPING_MESSAGE","signUpAPI","payload","dispatch","fetch","headers","method","body","JSON","stringify","then","json","statusCode","signUpSuccss","result","description","catch","err","signInAPI","loginSuccss","getUsersAPI","fetchUsersSuccss","getChatsAPI","fetchChatsSuccss","getGroupChatMessagesAPI","fetchGroupChatsSuccss","sendGroupMessageAPI","groupMessageSentSuccss","createGroupAPI","createGroupSuccss","ChatConstants","getFormatedDate","date","dt","Date","currentDate","m","getMonth","toString","padStart","d","getDate","y","getFullYear","time","getHours","getMinutes","getSeconds","getDay","getDateForLeftSideChat","Wave","typing","showName","userNameClass","waveClass","useDispatch","useEffect","setTimeout","id","class","ChatComponet","oldChat","recipientUser","loginInfo","chats","chatType","users","messageText","messsage","setMessage","messagesEndRef","useRef","current","scrollIntoView","behavior","block","inline","scrollToBottom","getUser","i","data","findIndex","user","populateMsg","chat","index","senderUserId","messageTimestamp","message","rightSideMsg","style","backgroundImage","avatarUrl","leftSideMsg","classNameName","chatId","reciverUserId","src","alt","float","chatRoomId","chatRoomName","getChatHeader","chatMessages","length","map","ref","isTyping","height","senderId","placeholder","receiverId","sendTypingNotification","preventDefault","msg","recipientId","content","sendMessage","prev","UserProfile","checked","chatUserProfile","handleUser","chatUserIcon","UsersComponent","startChat","val","UserOption","state","selected","handleChange","bind","this","setState","prevState","onOptionChange","React","Component","MultiSelect","selectedOptions","onOptionsChange","option","push","indexOf","splice","title","options","CreateChatGroup","groupInfo","setGroupInfo","groupData","groupName","groupMembers","submitCreateGroup","backFromCreateGroup","UserChatComponet","openUserChat","getUserObj","obj","reciverUser","senderUser","useSelector","marginLeft","lastTimestamp","lastMessageSentBy","lastMessage","renderUsers","renderGroups","Dropdown","dropDownList","item","selectedItem","ChatLeftComponet","openOptions","setOpenOptions","createGroup","setCreateGroup","_chats","chatObj","stompClient","ChatContainer","setRecipientUser","setOldChat","setChatType","connect","Stomp","require","SockJS","over","onConnected","onError","subscribe","onMessageReceived","notification","parse","messageType","getCurrentChat","sendTypingNotificationAPI","MainContainer","handleScroll","isSignIn","pure","App","upSertChat","array","_item","upSertGroupChat","addGroupMessegesToChat","groups","concat","chatMessageTypingStart","currentChat","parseInt","chatMessageTypingStop","sortChats","sort","a","b","createdTimestamp","rootReducer","combineReducers","action","isLogin","loginType","failedMessage","isLoading","isError","middleware","thunk","appStore","createStore","applyMiddleware","ReactDOM","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.88c229d4.chunk.js","sourcesContent":["import { useState } from \"react\";\r\nimport GoogleLogin from \"react-google-login\";\r\n\r\nconst ThirdParty = (props) => {\r\n\r\n    const [signupForm, setSignupForm] = useState({ userId: '', firstName: '', lastName: '' })\r\n\r\n    const googleLoginSuccess = (googleResponse) => {\r\n        if(googleResponse && googleResponse.profileObj){\r\n            setSignupForm({\r\n                userId: googleResponse.profileObj.email,\r\n                firstName: googleResponse.profileObj.firstName,\r\n                lastName: googleResponse.profileObj.lastName\r\n            });\r\n            props.submitRequest(signupForm);\r\n        }else{\r\n            alert(\"Google Login Failed\")\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div>\r\n            <GoogleLogin\r\n                clientId=\"809584238866-q4n3hl8kr9leiv8pj08n7b3q8um0d4h2.apps.googleusercontent.com\"\r\n                buttonText=\"Login with Google\"\r\n                onSuccess={googleLoginSuccess}\r\n                onFailure={googleLoginSuccess}\r\n                cookiePolicy={'single_host_origin'}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default ThirdParty;","import React, { useState } from 'react';\r\nimport ThirdParty from '../ThirdParty/ThirdParty';\r\nimport './Login.css';\r\n\r\nfunction Login(props) {\r\n\r\n    const [loginForm, setLoginForm] = useState({ password: '', userId: '' });\r\n\r\n\r\n    const login = () => {\r\n        console.log(loginForm);\r\n        props.signIn(loginForm);\r\n    }\r\n\r\n    const handleInputChange = e => {\r\n        setLoginForm({\r\n            ...loginForm,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login-container\">\r\n            <div className=\"login-form\">\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">User Id</label>\r\n                    <input type=\"email\" className=\"form-control\" name=\"userId\" onChange={handleInputChange} />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" name=\"password\" onChange={handleInputChange} />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={login}>Sign In</button>\r\n            </div>\r\n\r\n            {/* <ThirdParty\r\n                submitRequest={login}\r\n            /> */}\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Login;","import { useState } from \"react\";\r\nimport ThirdParty from \"../ThirdParty/ThirdParty\";\r\n\r\nconst SignUp = (props) => {\r\n\r\n    const [signupForm, setSignupForm] = useState({ userId: '', password: '', firstName: '', lastName: '' })\r\n\r\n    const handleInputChange = e => {\r\n        setSignupForm({\r\n            ...signupForm,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const signUp = () => {\r\n        props.signUp(signupForm);\r\n    }\r\n\r\n    return (\r\n        <div className=\"signup-container\">\r\n            <div className=\"signup-form\">\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">User Id</label>\r\n                    <input type=\"email\" className=\"form-control\" name=\"userId\" onChange={handleInputChange} />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Password</label>\r\n                    <input type=\"password\" className=\"form-control\" name=\"password\" onChange={handleInputChange} />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">First Name</label>\r\n                    <input type=\"email\" className=\"form-control\" name=\"firstName\" onChange={handleInputChange} />\r\n                </div>\r\n                <div className=\"mb-3\">\r\n                    <label className=\"form-label\">Last Name</label>\r\n                    <input type=\"email\" className=\"form-control\" name=\"lastName\" onChange={handleInputChange} />\r\n                </div>\r\n                \r\n                <button type=\"submit\" className=\"btn btn-primary\" onClick={signUp}>Sign Up</button>\r\n            </div>\r\n            <ThirdParty\r\n                submitRequest={signupForm}\r\n            />\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default SignUp;","export const StoreConstants = {\r\n    LOGIN_LOADING: 'lOGIN_LOADING',\r\n    LOGIN_SUCCESS: 'lOGIN_SUCCESS',\r\n    LOGIN_FAILED: 'LOGIN_FAILED',\r\n    SIGNUP_LOADING: 'SIGNUP_LOADING',\r\n    SIGNUP_SUCCESS: 'SIGNUP_SUCCESS',\r\n    SIGNUP_FAILED: 'SIGNUP_FAILED',\r\n    FETCH_USERS_LOADING: 'FETCH_USERS_LOADING',\r\n    FETCH_USERS_SUCCESS: 'FETCH_USERS_SUCCESS',\r\n    FETCH_USERS_FAILED: 'FETCH_USERS_FAILED',\r\n    FETCH_CHAT_MSGS_LOADING: 'FETCH_CHAT_MSGS_LOADING',\r\n    FETCH_CHAT_MSGS_SUCCESS: 'FETCH_CHAT_MSGS_SUCCESS',\r\n    FETCH_CHAT_MSGS_FAILED: 'FETCH_CHAT_MSGS_FAILED',\r\n    FETCH_CHATS_LOADING: 'FETCH_CHAT_MSGS_LOADING',\r\n    FETCH_CHATS_SUCCESS: 'FETCH_CHAT_MSGS_SUCCESS',\r\n    FETCH_CHATS_FAILED: 'FETCH_CHAT_MSGS_FAILED',\r\n    MSG_SEND_SUCCESS: 'MSG_SEND_SUCCESS',\r\n    MSG_SEND_FAILED: 'MSG_SEND_FAILED',\r\n    GROUP_MSG_SEND_SUCCESS: 'GROUP_MSG_SEND_SUCCESS',\r\n    GROUP_MSG_SEND_FAILED: 'GROUP_MSG_SEND_FAILED',\r\n    FETCH_GROUP_CHATS_SUCCESS: 'FETCH_GROUP_CHATS_SUCCESS',\r\n    FETCH_GROUP_CHATS_FAILED: 'FETCH_GROUP_CHATS_FAILED',\r\n    CREATE_GROUP_SUCCESS: 'CREATE_GROUP_SUCCESS',\r\n    CREATE_GROUP_FAILED: 'CREATE_GROUP_FAILED',\r\n    RECIVE_GROUP_CHAT_MSG_SUCCESS: 'RECIVE_GROUP_CHAT_MSG_SUCCESS',\r\n    RECIVE_CHAT_MESSAGE_TYPING: 'RECIVE_CHAT_MESSAGE_TYPING',\r\n    CHAT_MESSAGE_TYPING_STOP: 'CHAT_MESSAGE_TYPING_STOP'\r\n}","import { StoreConstants } from \"../StoreConstants\";\r\n\r\nexport function fetchChatsLoading() {\r\n    return {\r\n        type: StoreConstants.FETCH_CHATS_LOADING\r\n    }\r\n}\r\n\r\nexport function fetchChatsSuccss(response) {\r\n    return {\r\n        type: StoreConstants.FETCH_CHATS_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function fetchChatsFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.FETCH_CHATS_FAILED,\r\n        faildMessage\r\n    }\r\n}\r\n\r\nexport function messageSentSuccss(response) {\r\n    return {\r\n        type: StoreConstants.MSG_SEND_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function messageSentFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.MSG_SEND_FAILED,\r\n        faildMessage\r\n    }\r\n}\r\n\r\nexport function groupMessageSentSuccss(response) {\r\n    return {\r\n        type: StoreConstants.GROUP_MSG_SEND_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function groupMessageSentFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.GROUP_MSG_SEND_FAILED,\r\n        faildMessage\r\n    }\r\n}\r\n\r\nexport function fetchGroupChatsSuccss(response) {\r\n    return {\r\n        type: StoreConstants.FETCH_GROUP_CHATS_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function fetchGroupChatsFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.FETCH_GROUP_CHATS_FAILED,\r\n        faildMessage\r\n    }\r\n}\r\n\r\nexport function createGroupSuccss(response) {\r\n    return {\r\n        type: StoreConstants.CREATE_GROUP_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function createGroupFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.CREATE_GROUP_FAILED,\r\n        faildMessage\r\n    }\r\n}\r\n\r\nexport function reciveGroupChatMsg(response) {\r\n    return {\r\n        type: StoreConstants.RECIVE_GROUP_CHAT_MSG_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function typingMessages(response){\r\n    return{\r\n        type: StoreConstants.RECIVE_CHAT_MESSAGE_TYPING,\r\n        response\r\n    }\r\n}\r\nexport function typingMessagesStop(response){\r\n    return{\r\n        type: StoreConstants.CHAT_MESSAGE_TYPING_STOP,\r\n        response\r\n    }\r\n}\r\n","import { StoreConstants } from \"../StoreConstants\";\r\n\r\nexport function loginLoading() {\r\n    return {\r\n        type: StoreConstants.LOGIN_LOADING\r\n    }\r\n}\r\n\r\nexport function loginSuccss(response) {\r\n    return {\r\n        type: StoreConstants.LOGIN_SUCCESS,\r\n        response,\r\n    }\r\n}\r\n\r\nexport function loginFailed(response,faildMessage) {\r\n    return {\r\n        type: StoreConstants.LOGIN_FAILED,\r\n        response,\r\n        faildMessage\r\n    }\r\n}","import { StoreConstants } from \"../StoreConstants\";\r\n\r\nexport function signUpLoading() {\r\n    return {\r\n        type: StoreConstants.SIGNUP_LOADING\r\n    }\r\n}\r\n\r\nexport function signUpSuccss(response) {\r\n    return {\r\n        type: StoreConstants.SIGNUP_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function signUpFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.SIGNUP_FAILED,\r\n        faildMessage\r\n    }\r\n}","import { StoreConstants } from \"../StoreConstants\";\r\n\r\nexport function fetchUsersLoading() {\r\n    return {\r\n        type: StoreConstants.FETCH_USERS_LOADING\r\n    }\r\n}\r\n\r\nexport function fetchUsersSuccss(response) {\r\n    return {\r\n        type: StoreConstants.FETCH_USERS_SUCCESS,\r\n        response\r\n    }\r\n}\r\n\r\nexport function fetchUsersFailed(faildMessage) {\r\n    return {\r\n        type: StoreConstants.FETCH_USERS_FAILED,\r\n        faildMessage\r\n    }\r\n}","import { fetchChatMessagesFailed, fetchChatMessagesLoading, fetchChatMessagesSuccss } from \"../Store/Action/ChatMessagesAction\";\r\nimport { createGroupFailed, createGroupSuccss, fetchChatsFailed, fetchChatsLoading, fetchChatsSuccss, fetchGroupChatsFailed, fetchGroupChatsSuccss, groupMessageSentFailed, groupMessageSentSuccss, messageSentFailed, messageSentSuccss } from \"../Store/Action/ChatsAction\";\r\nimport { loginFailed, loginLoading, loginSuccss } from \"../Store/Action/LoginAction\"\r\nimport { signUpFailed, signUpLoading, signUpSuccss } from \"../Store/Action/SignUpAction\";\r\nimport { fetchUsersFailed, fetchUsersLoading, fetchUsersSuccss } from \"../Store/Action/UserAction\";\r\n\r\nconst BASE_URL = './api/';\r\nconst API = {\r\n    SIGN_UP: BASE_URL + 'user/signUp',\r\n    SIGN_IN: BASE_URL + 'user/signIn',\r\n    FETCH_USERS: BASE_URL + 'user/',\r\n    SNED_MSG: BASE_URL + 'chat',\r\n    FETCH_CHAT_MSGS: BASE_URL + 'chat/',\r\n    FETCH_CHATS: BASE_URL + 'chat/',\r\n    FETCH_GROUP_CHAT_MSGS: BASE_URL + 'chat/fetchChatRooms/',\r\n    SNED_GROUP_MSG: BASE_URL + 'chat/sendChatRoomMessage',\r\n    CREATE_GROUP: BASE_URL + 'chat/createChatRoom',\r\n    SEND_TYPING_MESSAGE: BASE_URL + 'chat/sendTypingMessage'\r\n\r\n}\r\n\r\nexport function signUpAPI(payload) {\r\n    return dispatch => {\r\n        dispatch(signUpLoading())\r\n        return fetch(API.SIGN_UP, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(signUpSuccss(response.result[0]))\r\n            } else {\r\n                dispatch(signUpFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(signUpFailed('Signup failed.'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function signInAPI(payload) {\r\n    return dispatch => {\r\n        dispatch(loginLoading())\r\n        return fetch(API.SIGN_IN, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(loginSuccss(response.result[0]));\r\n            } else {\r\n                dispatch(loginFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(loginFailed('Login failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function sendMessageAPI(payload) {\r\n    return dispatch => {\r\n        return fetch(API.SNED_MSG, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(messageSentSuccss(response.result[0]));\r\n            } else {\r\n                dispatch(messageSentFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(messageSentFailed('Login failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function getUsersAPI() {\r\n    return dispatch => {\r\n        dispatch(fetchUsersLoading())\r\n        return fetch(API.FETCH_USERS, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(fetchUsersSuccss(response.result));\r\n            } else {\r\n                dispatch(fetchUsersFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(fetchUsersFailed('Fetch Users failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function getChatMessagesAPI(chatId) {\r\n    return dispatch => {\r\n        dispatch(fetchChatMessagesLoading())\r\n        return fetch(API.FETCH_CHAT_MSGS + chatId, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(fetchChatMessagesSuccss(response.result[0]));\r\n            } else {\r\n                dispatch(fetchChatMessagesFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(fetchChatMessagesFailed('Fetch Chat Messages failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function getChatsAPI(userId) {\r\n    return dispatch => {\r\n        dispatch(fetchChatsLoading())\r\n        return fetch(API.FETCH_CHATS + userId, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(fetchChatsSuccss(response.result));\r\n            } else {\r\n                dispatch(fetchChatsFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(fetchChatsFailed('Fetch Chats failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function getGroupChatMessagesAPI(userId) {\r\n    return dispatch => {\r\n        return fetch(API.FETCH_GROUP_CHAT_MSGS + userId, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'GET'\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(fetchGroupChatsSuccss(response.result));\r\n            } else {\r\n                dispatch(fetchGroupChatsFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(fetchGroupChatsFailed('Fetch Group Messages failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function sendGroupMessageAPI(payload) {\r\n    return dispatch => {\r\n        return fetch(API.SNED_GROUP_MSG, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(groupMessageSentSuccss(response.result[0]));\r\n            } else {\r\n                dispatch(groupMessageSentFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(groupMessageSentFailed('Group message failed'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function createGroupAPI(payload) {\r\n    return dispatch => {\r\n        return fetch(API.CREATE_GROUP, {\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response => {\r\n            return response.json();\r\n        }).then(response => {\r\n            console.log(response);\r\n            if (response && response.statusCode === 0) {\r\n                dispatch(createGroupSuccss(response.result[0]))\r\n            } else {\r\n                dispatch(createGroupFailed(response.description))\r\n            }\r\n        }).catch(err => {\r\n            console.log(err);\r\n            dispatch(createGroupFailed('Group creation failed.'))\r\n        })\r\n    }\r\n}\r\n\r\nexport function sendTypingNotificationAPI(payload){\r\n    return dispatch =>{\r\n        return fetch(API.SEND_TYPING_MESSAGE,{\r\n            headers:{\r\n                    'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify(payload)\r\n        }).then(response=>{\r\n            return response.json();\r\n        }).then(response=>{\r\n            console.log(response)\r\n            // if(response && response.statusCode ===0){\r\n            //     dispatch(sendTypingNotificationSuccess(response));\r\n            // }\r\n        }).catch(err=>{\r\n            console.log(err);\r\n        })\r\n    }\r\n}","export const  ChatConstants = {\r\n    GROUP: 'GROUP',\r\n    USER: 'USER',\r\n    CHAT_USER_TYPING: 'CHAT_USER_TYPING',\r\n    GROUP_CHAT_USER_TYPING : 'GROUP_CHAT_USER_TYPING'\r\n}","export function getFormatedDate(date) {\r\n    var dt = new Date(date);\r\n    var currentDate = new Date();\r\n    var m = ((dt.getMonth() + 1).toString().padStart(2, '0'));\r\n    var d = (dt.getDate().toString().padStart(2, '0'));\r\n    var y = (dt.getFullYear().toString().padStart(4, '0'));\r\n    var time = (`${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}:${dt.getSeconds().toString().padStart(2, '0')}`\r\n        );\r\n    if (dt.getDay() === currentDate.getDay()) {\r\n        return time;\r\n    } else if(dt.getDate() === currentDate.getDate() -1){\r\n        return 'Yesterday ' + time;\r\n    } else{\r\n        if (dt.getFullYear() === currentDate.getFullYear()) {\r\n            return d + \"-\" + m + ' ' + time;\r\n        }else{\r\n            return d + \"-\" + m + '' + y + ' ' + time;\r\n        }\r\n    }\r\n    // return (`${\r\n    //     (dt.getMonth()+1).toString().padStart(2, '0')}/${\r\n    //     dt.getDate().toString().padStart(2, '0')}/${\r\n    //     dt.getFullYear().toString().padStart(4, '0')} ${\r\n    //     dt.getHours().toString().padStart(2, '0')}:${\r\n    //     dt.getMinutes().toString().padStart(2, '0')}:${\r\n    //     dt.getSeconds().toString().padStart(2, '0')}`\r\n    // );\r\n}\r\nexport function getDateForLeftSideChat(date) {\r\n    var dt = new Date(date);\r\n    var currentDate = new Date();\r\n    var m = ((dt.getMonth() + 1).toString().padStart(2, '0'));\r\n    var d = (dt.getDate().toString().padStart(2, '0'));\r\n    var y = (dt.getFullYear().toString().padStart(4, '0'));\r\n    var time = (`${dt.getHours().toString().padStart(2, '0')}:${dt.getMinutes().toString().padStart(2, '0')}`\r\n        );\r\n    if (dt.getDay() === currentDate.getDay()) {\r\n        return time;\r\n    } else if(dt.getDate() === currentDate.getDate()-1){\r\n        return 'Yesterday';\r\n    } else{\r\n        if (dt.getFullYear() === currentDate.getFullYear()) {\r\n            return d + \"-\" + m ;\r\n        }else{\r\n            return d + \"-\" + m + '' + y ;\r\n        }\r\n    }\r\n}","import { useEffect } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { typingMessagesStop } from '../../Store/Action/ChatsAction';\r\nimport './Wave.css';\r\nconst Wave = (props) => {\r\n    const { name, typing, showName,userNameClass,waveClass } = props;\r\n    const dispatch = useDispatch();\r\n    useEffect(()=>{\r\n        setTimeout(\r\n            () => dispatch(typingMessagesStop(typing)), \r\n            10000\r\n          );\r\n    })\r\n    return (\r\n        <div>\r\n            <div className={userNameClass}>\r\n                {showName\r\n                    ? name + \" is typing\"\r\n                    : \" typing\"}\r\n            </div>\r\n\r\n            <div id={waveClass}>\r\n                <span class=\"dot\"></span>\r\n                <span class=\"dot\"></span>\r\n                <span class=\"dot\"></span>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\nexport default Wave;","import { useEffect, useRef, useState } from \"react\"\r\nimport { ChatConstants } from \"../../../Utils/Constansts\";\r\nimport './ChatComponent.css';\r\nimport './Chat.css';\r\nimport { getFormatedDate } from \"../../../Utils/CommonUtil\";\r\nimport Wave from \"../../UtilsComponets/Wave\";\r\nconst ChatComponet = (props) => {\r\n\r\n    const { oldChat, recipientUser, loginInfo, chats, chatType, users } = props;\r\n    console.log(loginInfo)\r\n    const [messsage, setMessage] = useState({ messageText: '' });\r\n    const messagesEndRef = useRef(null);\r\n    const scrollToBottom = () => {\r\n        messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" })\r\n\r\n    };\r\n    useEffect(() => {\r\n        scrollToBottom();\r\n       // sortChats();\r\n    });\r\n   \r\n    const sortChats =()=>{\r\n        if(chats && chats.length){\r\n            for(var i=0;i<chats.length;i++){\r\n                chats[i].chatMessages.sort((a,b) => new Date(a.messageTimestamp) - new Date(b.messageTimestamp));\r\n                chats[i] = {\r\n                  ...chats[i],\r\n                  \"messageTimestamp\": chats[i].chatMessages.length ? chats[i].chatMessages[0].messageTimestamp : new Date()\r\n                }\r\n              }\r\n              chats.sort((a,b)=> new Date(b.messageTimestamp) - new Date(a.messageTimestamp));  \r\n        }\r\n        \r\n    }\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n        console.log(chats);\r\n        var msg = {};\r\n        if (chatType === ChatConstants.USER) {\r\n            msg = {\r\n                senderId: loginInfo.data.id,\r\n                recipientId: recipientUser.id,\r\n                content: messsage.messageText,\r\n                chatId: oldChat.chatId\r\n            };\r\n        } else {\r\n            msg = {\r\n                \"chatRoomId\": chats.chatRoomId,\r\n                \"message\": messsage.messageText,\r\n                \"senderId\": loginInfo.data.id\r\n            }\r\n        }\r\n        props.sendMessage(msg, chatType);\r\n        console.log(\"Message sent successfully\", JSON.stringify(msg))\r\n        setMessage(prev => ({ ...prev, messageText: '' }))\r\n    };\r\n    const handleInputChange = e => {\r\n        setMessage({\r\n            ...messsage,\r\n            [e.target.name]: e.target.value\r\n        })\r\n        const id = chats.chatId !== null && chats.chatId ? chats.chatId : (chats.chatRoomId != null && chats.chatRoomId ? chats.chatRoomId : null);\r\n        if (e.target.value.length >= 3 && id) {\r\n            const typing = {\r\n                id: id,\r\n                receiverId: recipientUser.id,\r\n                senderId: loginInfo.data.id,\r\n                chatType: chatType\r\n            }\r\n            props.sendTypingNotification(typing);\r\n        }\r\n    }\r\n    const getUser = (id) => {\r\n        var i = users.data.findIndex(user => user.id === id);\r\n        if (i > -1) {\r\n            return users.data[i];\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    const leftSideMsg = (data, index) => {\r\n        const user = getUser(data.senderUserId);\r\n        return (\r\n            <div key={index} className=\"msg left-msg\">\r\n                <div className=\"msg-img\" style={{ backgroundImage: `url(${user.avatarUrl})` }} ></div>\r\n\r\n                <div className=\"msg-bubble\">\r\n                    <div className=\"msg-info\">\r\n                        <div className=\"msg-info-name\">{user.firstName}</div>\r\n                        <div className=\"msg-info-time\">{getFormatedDate(data.messageTimestamp)}</div>\r\n                    </div>\r\n\r\n                    <div className=\"msg-text\">\r\n                        {data.message}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n    const rightSideMsg = (data, index) => {\r\n        return (\r\n            <div key={index} className=\"msg right-msg\">\r\n                <div className=\"msg-bubble\">\r\n                    <div className=\"msg-info\">\r\n                        <div className=\"msg-info-time\">{getFormatedDate(data.messageTimestamp)}</div>\r\n                    </div>\r\n                    <div className=\"msg-text\">\r\n                        {data.message}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n    const populateMsg = (chat, index) => {\r\n        if (chat && chat.senderUserId && chat.senderUserId === loginInfo.data.id) {\r\n            return rightSideMsg(chat, index);\r\n        } else {\r\n            return leftSideMsg(chat, index);\r\n        }\r\n    }\r\n    const getChatHeader = (chat) => {\r\n        if (chat && chat.chatId) {\r\n            const user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\r\n            if (user) {\r\n                return (<div className=\"msger-header-title\">\r\n                    {user.avatarUrl\r\n                        ? <img src={user.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\" style={{ float: 'left' }}></img>\r\n                        : <span className=\"chat-user-icon chat-title-user-icon\" />}\r\n                    <div className=\"chat-title-user-name\">{user.firstName + \" \" + user.lastName}</div>\r\n                    <i className=\"fas fa-comment-alt\"></i>\r\n                </div>);\r\n            } else {\r\n                return null;\r\n            }\r\n\r\n        } else if (chat && chat.chatRoomId) {\r\n            return (<div className=\"msger-header-title\">\r\n                {chat.avatarUrl\r\n                    ? <img src={chat.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\r\n                    : <span className=\"chat-user-group-icon chat-title-group-icon\" />}\r\n                <div className=\"chat-title-group-name\"> {chat.chatRoomName}</div>\r\n                <i className=\"fas fa-comment-alt\"> </i>\r\n            </div>);\r\n        }\r\n    }\r\n\r\n    const typing = (chat) => {\r\n        if (chat && chat.typing && chat.typing.isTyping) {\r\n            if (chat.typing.chatType === ChatConstants.USER) {\r\n                const user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\r\n                if (user) {\r\n                    return (<div>\r\n                        <Wave\r\n                            name={user.firstName}\r\n                            typing={chat.typing}\r\n                            showName={true}\r\n                            userNameClass=\"chat-middle-typing-user-name\"\r\n                            waveClass=\"wave-middle\"\r\n\r\n                        />\r\n                    </div>)\r\n                } else {\r\n                    return <div style={{ height: '23px' }}></div>;\r\n                }\r\n            } else {\r\n                const user = getUser(chat.typing.senderId);\r\n                if (user) {\r\n                    return (<div>\r\n                        <Wave\r\n                            name={user.firstName}\r\n                            typing={chat.typing}\r\n                            showName={true}\r\n                            userNameClass=\"chat-middle-typing-user-name\"\r\n                            waveClass=\"wave-middle\"\r\n\r\n                        />\r\n                    </div>)\r\n                } else {\r\n                    return <div style={{ height: '23px' }}></div>;\r\n                }\r\n            }\r\n\r\n\r\n        } else {\r\n            return <div style={{ height: '23px' }}></div>;\r\n        }\r\n    }\r\n    return (\r\n\r\n        <div classNameName=\"chat-message-container\">\r\n            <section className=\"msger\">\r\n                {chatType ?\r\n                    (<div>\r\n                        <header className=\"msger-header\">\r\n                            {getChatHeader(chats)}\r\n                            <div className=\"msger-header-options\">\r\n                                <span><i className=\"fas fa-cog\"></i></span>\r\n                            </div>\r\n                        </header>\r\n\r\n                        <main className=\"msger-chat\" id=\"msger-chat-id\">\r\n                            {chatType === ChatConstants.USER\r\n                                ? <div> {chats && chats.chatMessages && chats.chatMessages.length ?\r\n                                    chats.chatMessages.map((chat, i) =>\r\n                                        populateMsg(chat, i)\r\n                                    )\r\n                                    : \"No Messages to load\"}\r\n                                </div>\r\n                                : (chats && chats.chatMessages && chats.chatMessages.length\r\n                                    ? (chats.chatMessages.map((chat, i) =>\r\n                                        populateMsg(chat, i)\r\n                                    ))\r\n                                    : \"Welcome to group\"\r\n                                )\r\n                            }\r\n\r\n                            <div ref={messagesEndRef} />\r\n\r\n                        </main>\r\n                        {typing(chats)}\r\n                        <form className=\"msger-inputarea\">\r\n                            <input type=\"text\" className=\"msger-input\" placeholder=\"Enter your message...\" name=\"messageText\" onChange={handleInputChange} />\r\n                            <button type=\"submit\" className=\"msger-send-btn\" onClick={sendMessage}>Send</button>\r\n                        </form>\r\n                    </div>\r\n                    )\r\n                    : (<div className=\"chat-welcome-image\"><div className=\"chat-welocme-msg\" >Welcome to chat room</div></div>)}\r\n            </section>\r\n\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ChatComponet;","\r\nimport './UserProfile.css';\r\nconst UserProfile = (props) => {\r\n    const {index, user} = props;\r\n    const handleUser = (user)=>{\r\n        props.handleUser();\r\n    }\r\n    return (\r\n        <div key={index} className={props.checked ? props.chatUserProfile + \" chat-user-profile\" : props.chatUserProfile}  onClick={e => { handleUser(user) }}>\r\n            {user.avatarUrl\r\n                ? <img src={user.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\r\n                : <span className={props.chatUserIcon} />}\r\n            <div className={user.avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} > {user.firstName + ' ' + user.lastName}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default UserProfile;","import './ChatRight.css';\r\nimport UserProfile from './UserProfile';\r\n\r\nconst UsersComponent = (props) => {\r\n\r\n    const { loginInfo, users } = props;\r\n\r\n\r\n    const startChat = (user) => {\r\n        console.log(user);\r\n        props.startChat(user);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className=\"\">\r\n                <div className=\"chat-right-header\">\r\n                    Users\r\n                </div>\r\n                <div className=\"users-div\">\r\n                    {users && users.data && users.data.length ?\r\n                        (users.data.map((val, index) =>\r\n                            val.id === loginInfo.data.id\r\n                                ? null\r\n                                : <UserProfile\r\n                                    user={val}\r\n                                    index={index}\r\n                                    handleUser={startChat}\r\n                                    chatUserProfile=\"chat-user-chat-profile\"\r\n                                    chatUserIcon=\"chat-user-icon\"\r\n                                />\r\n                        ))\r\n                        : \"No Users Found\"\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n    // (<div key={index}className=\"chat-user-chat-profile\" onClick={e => { startChat(val) }}>\r\n    //                                 {val.avatarUrl\r\n    //                                     ? <img src={val.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\r\n    //                                     : <span className=\"chat-user-icon\" />}\r\n    //                                 <div  className= {val.avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} > {val.firstName + ' ' + val.lastName}</div>\r\n    //                             </div>)\r\n}\r\nexport default UsersComponent;","import React from 'react';\r\nimport UserProfile from '../Chat/RightChat/UserProfile';\r\n\r\nclass UserOption extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { selected: false }\r\n        this.handleChange = this.handleChange.bind(this)\r\n    }\r\n\r\n    handleChange() {\r\n        this.setState(\r\n            prevState => ({ selected: !prevState.selected }),\r\n            () => this.props.onOptionChange(this.props.id, this.state.selected)\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div id={this.props.id}>\r\n                <UserProfile\r\n                    user={this.props.user}\r\n                    index={this.props.id}\r\n                    handleUser={this.handleChange}\r\n                    chatUserProfile=\"chat-user-profile-group-create\"\r\n                    chatUserIcon=\"chat-user-icon-group-create\"\r\n                    checked={this.state.selected}\r\n                />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default UserOption;","import React from 'react';\r\nimport UserOption from './UserOption';\r\n\r\nclass MultiSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { selectedOptions: [] }\r\n        this.onOptionsChange = this.onOptionsChange.bind(this)\r\n    }\r\n\r\n    onOptionsChange(option, selected) {\r\n        if (selected) {\r\n            this.setState(\r\n                prevState => {\r\n                    prevState.selectedOptions.push(option)\r\n                    return {\r\n                        selectedOptions: prevState.selectedOptions,\r\n                    }\r\n                },\r\n                () => this.props.onOptionsChange(this.state.selectedOptions)\r\n            )\r\n        } else {\r\n            this.setState(\r\n                prevState => {\r\n                    const index = prevState.selectedOptions.indexOf(option)\r\n                    if (index > -1) {\r\n                        prevState.selectedOptions.splice(index, 1)\r\n                    }\r\n                    return {\r\n                        selectedOptions: prevState.selectedOptions,\r\n                    }\r\n                },\r\n                () => this.props.onOptionsChange(this.state.selectedOptions)\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <fieldset>\r\n                <legend>{this.props.title}</legend>\r\n                {this.props.options.map((option, index) => (\r\n                    <UserOption\r\n                        user={option}\r\n                        key={option.id}\r\n                        id={option.id}\r\n                        option={option.firstName}\r\n                        onOptionChange={this.onOptionsChange}\r\n                        \r\n                    />\r\n                    // <Option key={option.id} id={option.id} option={option.firstName} onOptionChange={this.onOptionsChange} />\r\n                ))}\r\n            </fieldset>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MultiSelect;","import { useState } from \"react\";\r\nimport MultiSelect from \"../../UtilsComponets/MultiSelect\";\r\n\r\nconst CreateChatGroup = (props) => {\r\n    const { users ,loginInfo } = props;\r\n    const [groupInfo, setGroupInfo] = useState({ 'groupName': '', 'groupMembers': [] })\r\n\r\n    const handleInputChange = (e) => {\r\n        setGroupInfo({\r\n            ...groupInfo,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    const handleSelectUsers = (user) => {\r\n        console.log(user);\r\n        setGroupInfo({\r\n            ...groupInfo,\r\n            groupMembers : user\r\n        })\r\n        console.log(groupInfo);\r\n    }\r\n    const clickCreateGroup = () => {\r\n        const groupData = {\r\n            \"chatRoomName\": groupInfo.groupName,\r\n            \"chatRoomUserIds\": groupInfo.groupMembers,\r\n            \"createdBy\": loginInfo.data.id,\r\n        }\r\n        props.submitCreateGroup(groupData)\r\n    }\r\n    \r\n    return (\r\n        <div className=\"create-chat-room-container\">\r\n            <div className=\"chat-group-create-btns\">\r\n                <button className=\"chat-btn btn-create\" onClick={clickCreateGroup} >Create Group</button>\r\n                <button className=\"chat-btn btn-cancle\" onClick={props.backFromCreateGroup} >Cancle</button>\r\n            </div>\r\n            <div className=\"chat-boarder\"></div>\r\n            <div>\r\n                <input type=\"text\" name=\"groupName\" placeholder=\"Enter Group Name\" onChange={handleInputChange} />\r\n            </div>\r\n            {/* <div className=\"chat-boarder\"></div> */}\r\n            <div>Select the users</div>\r\n            <div>\r\n                <MultiSelect\r\n                    options={users.data}\r\n                    onOptionsChange={handleSelectUsers}\r\n                />\r\n\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\nexport default CreateChatGroup;","import { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { ChatConstants } from '../../../Utils/Constansts';\r\nimport { getDateForLeftSideChat } from \"../../../Utils/CommonUtil\";\r\nimport Wave from '../../UtilsComponets/Wave';\r\nimport './ChatLeft.css';\r\n\r\n// const UserIcon = require('../../../images/user-icon.jpg');\r\n\r\nconst UserChatComponet = (props) => {\r\n    const { chats, oldChat, recipientUser, loginInfo, users } = props;\r\n    // let { chats} = props;\r\n    const [chatList, setChatList] = useState([]);\r\n    const [searchChat, setSearchChat] = useState('');\r\n    const openUserChat = (data, type) => {\r\n        props.openUserChat(data, type);\r\n    }\r\n    const getUserObj = (obj) => {\r\n        return obj.reciverUser && loginInfo.data && obj.reciverUser.id === loginInfo.data.id ? obj.senderUser : obj.reciverUser;\r\n    }\r\n    let _chats = useSelector(state => state.chats);\r\n    // useEffect(() => {\r\n    //     setChatList(_chats);\r\n    // }, [_chats])\r\n    // useEffect( ()=>{\r\n    //     if(chatList.data && searchChat){\r\n    //         setChatList(chatList.data.filter(chat=> { \r\n    //             return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().includes(searchChat)) ||(chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().includes(searchChat)) )\r\n    //         }));\r\n    //         //setChatList(c);\r\n    //     }\r\n\r\n    // },[searchChat,chatList])\r\n    // if(searchChat){\r\n\r\n    // setChatList(chats.data.filter(chat=> { \r\n    //     return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().includes(searchChat)) ||(chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().includes(searchChat)) )\r\n    // }));\r\n    // setChatList(c);\r\n    // catalogRoleMapData = catalogRoleMapData.filter((item) => {return item.catalogRoleName.toLowerCase().indexOf(searchValue.toLowerCase()) > -1})\r\n    // }\r\n    const searchChats = (e) => {\r\n        chats.data = chatList.data.filter(chat => {\r\n            return ((chat.chatRoomName && chat.chatRoomName.toLowerCase().indexOf(searchChat) > -1) || (chat.reciverUser && chat.reciverUser.firstName && chat.reciverUser.firstName.toLowerCase().indexOf(searchChat) > -1))\r\n            // chats.data = _chats.data.filter((chat) => {return item.catalogRoleName.toLowerCase().indexOf(searchValue.toLowerCase()) > -1})\r\n        });\r\n    }\r\n    const getUser = (id) => {\r\n        if(users.data){\r\n            var i = users.data.findIndex(user => user.id === id);\r\n            if (i > -1) {\r\n                return users.data[i];\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n        \r\n    }\r\n    const typing = (chat) => {\r\n        if (chat && chat.typing && chat.typing.isTyping) {\r\n            let user;\r\n            if (chat.typing.chatType === ChatConstants.USER) {\r\n                user = getUser(chat.senderUserId === loginInfo.data.id ? chat.reciverUserId : chat.senderUserId);\r\n            }else{\r\n                user = getUser(chat.typing.senderId);\r\n            }\r\n            if (user) {\r\n                return (<div>\r\n                    <Wave\r\n                        name={user.firstName}\r\n                        typing={chat.typing}\r\n                        showName={false}\r\n                        userNameClass=\"chat-left-typing-user-name\"\r\n                        waveClass=\"wave-left-side\"\r\n                    />\r\n                </div>)\r\n            } else {\r\n                return <div style={{ height: '23px' }}></div>;\r\n            }\r\n\r\n        } else {\r\n            return <div style={{ height: '23px' }}></div>;\r\n        }\r\n    }\r\n    const renderGroups = (obj, index) => {\r\n        return (<div key={index} id={index} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(obj, ChatConstants.GROUP) }}>\r\n            {obj.avatarUrl && obj.avatarUrl !== null\r\n                ? <img src={obj.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\r\n                : <span className=\"chat-user-group-icon\" />}\r\n            <div className=\"chat-user-chat-profile-user-name\" key={obj.chatRoomId}> {obj.chatRoomName} </div>\r\n            <div className=\"chat-left-last-timestamp\">{getDateForLeftSideChat(obj.lastTimestamp)}</div>\r\n            { obj.typing && obj.typing.isTyping \r\n            ? typing(obj) \r\n            : <div className=\"chat-left-last-sent\">{obj.lastMessageSentBy ? (getUser(obj.lastMessageSentBy).firstName + \": \" + obj.lastMessage) : \"\"}</div>\r\n            }\r\n            <div className={obj.lastMessageSentBy ? \"chat-left-msg-count\" : \"chat-left-msg-count-2\"}>10</div>\r\n        </div>)\r\n    }\r\n    const renderUsers = (obj, index) => {\r\n        return (<div key={index}  id={index} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(obj, ChatConstants.USER) }}>\r\n            {getUserObj(obj).avatarUrl\r\n                ? <img src={getUserObj(obj).avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\" ></img>\r\n                : <span className=\"chat-user-icon\" style={{ marginLeft: '-5px' }} />}\r\n            <div className={getUserObj(obj).avatarUrl ? \"chat-user-chat-profile-user-name2\" : \"chat-user-chat-profile-user-name\"} key={obj.chatId}>{getUserObj(obj).firstName} </div>\r\n            <div className=\"chat-left-last-timestamp\">{getDateForLeftSideChat(obj.lastTimestamp)}</div>\r\n            { obj.typing && obj.typing.isTyping \r\n            ? typing(obj) \r\n            : <div  className=\"chat-left-last-sent\">{getUser(obj.lastMessageSentBy).firstName + \": \" + obj.lastMessage}</div>\r\n            }\r\n            <div className=\"chat-left-msg-count\">5</div>\r\n        </div>)\r\n    }\r\n    return (\r\n        <div>\r\n            <div className=\"chat-user-group-search\">\r\n                <input className=\"chat-user-group-search-input\" placeholder=\"Search Chat\" type=\"text\"  />\r\n                {/* //onChange={e => { setSearchChat(e.target.value); searchChats(e) }} */}\r\n            </div>\r\n\r\n            <div className=\"chat-user-chats\" id=\"jkj12\">\r\n                {chats && chats.data ?\r\n                    (chats.data.map((obj, index) =>\r\n                        obj.chatId\r\n                            ? renderUsers(obj, index)\r\n                            : renderGroups(obj, index)\r\n                    ))\r\n                    : null\r\n                }\r\n                {/* {oldChat.chatId === undefined && recipientUser.id && (chats.data.length === 0 || chats.data.findIndex(chatObj => chatObj.reciverUser.id === recipientUser.id) === -1) ?\r\n                    <div key={recipientUser.id} id={recipientUser.id} className=\"chat-user-chat-profile\" onClick={e => { openUserChat(recipientUser, ChatConstants.USER) }}>\r\n                        <div className=\"chat-user-chat-profile-user-name\" >{recipientUser.firstName} </div>\r\n                    </div>\r\n                    : \"\"\r\n                } */}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserChatComponet;","import './DropDown.css';\r\nconst Dropdown = (props) => {  \r\n    const { dropDownList } = props;\r\n    const selectedItem = (item) =>{\r\n        props.selectedItem(item);\r\n    }\r\n    return(\r\n        <div className=\"chat-dropdown-menu\">\r\n            {\r\n                dropDownList.map((item,index) => \r\n                    <div className=\"chat-dropdown-option\" key={index} onClick={e=>selectedItem(item)}> {item} </div>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default Dropdown;","import { useEffect, useState } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport CreateChatGroup from \"./CreateChatGroupComponet\";\r\nimport UserChatComponet from \"./UserChatComponet\";\r\nimport './ChatLeft.css';\r\nimport Dropdown from \"../../UtilsComponets/DropDown\";\r\nimport { ChatConstants } from \"../../../Utils/Constansts\";\r\n\r\nconst options = [\"Create Group\", \"Settings\"];\r\nconst ChatLeftComponet = (props) => {\r\n\r\n    const { oldChat, recipientUser, loginInfo, chats, users } = props;\r\n    const [openOptions, setOpenOptions] = useState(false);\r\n    const [createGroup, setCreateGroup] = useState(false);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log(\"oldChat\", oldChat)\r\n        console.log(\"recipientUser\", recipientUser)\r\n        // if(oldChat.chatId === undefined && recipientUser.id){\r\n        //     chats\r\n        // }\r\n    })\r\n    const openUserChat = (chatObj, type) => {\r\n        props.openUserChat(chatObj, type);\r\n    }\r\n    const clickOpenOption = () => {\r\n        setOpenOptions(true);\r\n    }\r\n\r\n    const submitCreateGroup = (groupInfo) => {\r\n        console.log(groupInfo);\r\n        setCreateGroup(false);\r\n        props.submitCreateGroup(groupInfo);\r\n    }\r\n    const backFromCreateGroup = () => {\r\n        setCreateGroup(true);\r\n    }\r\n    const selectedItem = (item) => {\r\n        console.log(item);\r\n        setOpenOptions(false);\r\n        if (item === \"Create Group\") {\r\n            setCreateGroup(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n\r\n        <div className=\"chat-left-container\">\r\n            <div className=\"chat-left-top\">\r\n                <div className=\"chat-left-user-profile\">\r\n                    {loginInfo.data.avatarUrl\r\n                        ? <img src={loginInfo.data.avatarUrl} alt=\"Avatar\" className=\"chat-user-profile-avatar\"></img>\r\n                        : <span className=\"chat-user-icon\" />}\r\n                    <span className={loginInfo.data.avatarUrl ? \"chat-left-user-profile-user-name\" : \"chat-left-user-profile-user-name2\"}>{loginInfo.data.firstName}</span>\r\n                </div>\r\n                <div className=\"chat-left-options\" >\r\n                    <i className=\"chat-left-options-icon\" onClick={clickOpenOption}>...</i>\r\n                    {openOptions\r\n                        ? <Dropdown\r\n                            selectedItem={selectedItem}\r\n                            dropDownList={options}\r\n                        /> : ''}\r\n\r\n                </div>\r\n            </div>\r\n            {createGroup ?\r\n                <CreateChatGroup\r\n                    users={users}\r\n                    submitCreateGroup={submitCreateGroup}\r\n                    loginInfo={loginInfo}\r\n                    backFromCreateGroup={backFromCreateGroup}\r\n                />\r\n                :\r\n                (<div>\r\n                    <UserChatComponet\r\n                        loginInfo={loginInfo}\r\n                        chats={chats}\r\n                        _chats={chats}\r\n                        oldChat={oldChat}\r\n                        recipientUser={recipientUser}\r\n                        openUserChat={openUserChat}\r\n                        users={users}\r\n                    />\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default ChatLeftComponet;","import './ChatContainer.css';\r\nimport ChatComponet from '../../Componet/Chat/MiddleChat/ChatComponent';\r\nimport UsersComponent from '../../Componet/Chat/RightChat/UsersComponent';\r\nimport { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { createGroupAPI, getChatsAPI, getGroupChatMessagesAPI, getUsersAPI, sendGroupMessageAPI, sendMessageAPI, sendTypingNotificationAPI } from '../../Services/APIService';\r\nimport { useSelector } from 'react-redux';\r\nimport ChatLeftComponet from '../../Componet/Chat/LeftChat/ChatLeftComponet';\r\nimport { fetchGroupChatsSuccss, messageSentSuccss, reciveGroupChatMsg, typingMessages } from '../../Store/Action/ChatsAction';\r\nimport {ChatConstants} from '../../Utils/Constansts';\r\n\r\nvar stompClient = null;\r\nconst ChatContainer = (props) => {\r\n    const { loginInfo } = props;\r\n\r\n    const [recipientUser, setRecipientUser] = useState({});\r\n    const [oldChat, setOldChat] = useState({});\r\n    const [chatType, setChatType] = useState('');\r\n\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        dispatch(getUsersAPI());\r\n    }, [dispatch]);\r\n    useEffect(() => {\r\n        dispatch(getChatsAPI(loginInfo.data.id));\r\n        dispatch(getGroupChatMessagesAPI(loginInfo.data.id))\r\n    }, [dispatch, loginInfo.data.id])\r\n\r\n    useEffect(() => {\r\n        if (stompClient == null) {\r\n            connect();\r\n        }\r\n    });\r\n\r\n\r\n\r\n    const users = useSelector((state) => state.users);\r\n\r\n    console.log(\"users\", users)\r\n    const chats = useSelector(state => state.chats);\r\n\r\n    const startChat = (user) => {\r\n        console.log(user);\r\n        setRecipientUser({\r\n            ...user\r\n        })\r\n        let chat = null;\r\n        if (chats && chats.data) {\r\n            const i = chats.data.findIndex(chat => (chat.senderUserId === loginInfo.data.id || chat.senderUserId === user.id) && (chat.reciverUserId === user.id || chat.reciverUserId === loginInfo.data.id))\r\n            if (i > -1) {\r\n                chat = chats.data[i]\r\n            } else {\r\n                chat = null;\r\n            }\r\n            console.log(chat);\r\n        }\r\n        setOldChat({\r\n            ...chat\r\n        })\r\n        setChatType(ChatConstants.USER);\r\n    }\r\n\r\n    const openUserChat = (chatObj,type) => {\r\n        console.log(chatObj);\r\n        let chat = null;\r\n        if (ChatConstants.USER === type) {\r\n            if (loginInfo.data.id === chatObj.reciverUser.id) {\r\n                setRecipientUser({ ...chatObj.senderUser })\r\n            } else {\r\n                setRecipientUser({ ...chatObj.reciverUser })\r\n            }\r\n            if (chats && chats.data) {\r\n                const i = chats.data.findIndex(chat =>\r\n                    chat.senderUser && (chat.senderUser.id === loginInfo.data.id || chat.senderUser.id === chatObj.senderUser.id) && chat.reciverUser && (chat.reciverUser.id === chatObj.reciverUser.id || chat.reciverUser.id === loginInfo.data.id))\r\n                if (i > -1) {\r\n                    chat = chats.data[i]\r\n                }\r\n            }\r\n        } else {\r\n            if (chats && chats.data) {\r\n                const i = chats.data.findIndex(chat => chat.chatRoomId === chatObj.chatRoomId)\r\n                if (i > -1) {\r\n                    chat = chats.data[i]\r\n                }\r\n            }\r\n        }\r\n        setOldChat({ ...chat })\r\n        setChatType(type);\r\n    }\r\n\r\n    const connect = () => {\r\n        const Stomp = require(\"stompjs\");\r\n        var SockJS = require(\"sockjs-client\");\r\n        SockJS = new SockJS(\"http://localhost:2727/ws\");\r\n        stompClient = Stomp.over(SockJS);\r\n        stompClient.connect({}, onConnected, onError);\r\n    };\r\n\r\n    const onConnected = () => {\r\n        console.log(\"connected\");\r\n        stompClient.subscribe(\r\n            \"/user/\" + loginInfo.data.id + \"/queue/messages\",\r\n            onMessageReceived\r\n        );\r\n    };\r\n\r\n    const onError = (err) => {\r\n        console.log(err);\r\n    };\r\n\r\n    const onMessageReceived = (msg) => {\r\n        const notification = JSON.parse(msg.body);\r\n        console.log(\"Message recevied\", notification);\r\n        if(ChatConstants.USER === notification.messageType){\r\n            dispatch(messageSentSuccss(notification.message[0]))\r\n        }else if(ChatConstants.GROUP === notification.messageType){\r\n            dispatch(reciveGroupChatMsg(notification.message[0]))\r\n        }else if(ChatConstants.CHAT_USER_TYPING === notification.messageType){\r\n            dispatch(typingMessages(notification.message));\r\n        }else if(ChatConstants.GROUP_CHAT_USER_TYPING === notification.messageType){\r\n            dispatch(typingMessages(notification.message));\r\n        }\r\n       \r\n        \r\n    };\r\n    const sendMessage = (msg,type) => {\r\n        // stompClient.send(\"/app/api/chat\", {}, JSON.stringify(msg));\r\n        if(type === ChatConstants.USER){\r\n            dispatch(sendMessageAPI(msg));\r\n        }else{\r\n            dispatch(sendGroupMessageAPI(msg));\r\n        }\r\n        \r\n        console.log(\"Message sent successfully\", JSON.stringify(msg))\r\n    };\r\n    const sendTypingNotification = (payload)=>{\r\n        dispatch(sendTypingNotificationAPI(payload))\r\n    }\r\n\r\n    const getCurrentChat = () => {\r\n        if (chats && chats.data && chats.data.length) {\r\n            var i = -1;\r\n            if(chatType === ChatConstants.USER){\r\n                i = chats.data.findIndex(chat => ((chat.chatId && chat.chatId === oldChat.chatId) || chat.reciverUserId === recipientUser.id));\r\n            }else{\r\n                i = chats.data.findIndex(chat => chat.chatRoomId === oldChat.chatRoomId);\r\n            }\r\n            \r\n            if (i > -1) {\r\n                return chats.data[i];\r\n            } else if (chats.data.length === 1 && (oldChat.chatId || oldChat.chatRoomId)) {\r\n                return chats.data[0];\r\n            } else {\r\n                return null;\r\n            }\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n    const submitCreateGroup = (groupInfo) => {\r\n        dispatch(createGroupAPI(groupInfo));\r\n    }\r\n    \r\n    return (\r\n\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-row\">\r\n                <div className=\"chat-left\">\r\n                    <ChatLeftComponet\r\n                        oldChat={oldChat}\r\n                        recipientUser={recipientUser}\r\n                        loginInfo={loginInfo}\r\n                        chats={chats}\r\n                        openUserChat={openUserChat}\r\n                        users={users}\r\n                        submitCreateGroup={submitCreateGroup}\r\n                    />\r\n                </div>\r\n                <div className=\"chat-middle\">\r\n                    <ChatComponet\r\n                        oldChat={oldChat}\r\n                        recipientUser={recipientUser}\r\n                        loginInfo={loginInfo}\r\n                        sendMessage={sendMessage}\r\n                        chats={getCurrentChat()}\r\n                        chatType={chatType}\r\n                        users={users}\r\n                        sendTypingNotification = {sendTypingNotification}\r\n                    />\r\n                </div>\r\n                <div className=\"chat-right\">\r\n                    <UsersComponent\r\n                        startChat={startChat}\r\n                        loginInfo={loginInfo}\r\n                        users={users}\r\n                        chatType={chatType}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default ChatContainer;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport Login from '../Componet/Login/Login';\r\nimport SignUp from '../Componet/SignUp/SignUp';\r\nimport { signInAPI, signUpAPI } from '../Services/APIService';\r\nimport ChatContainer from './Chat/ChatContainer';\r\nimport './MainContainer.css';\r\n\r\nclass MainContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isSignIn: true,\r\n        }\r\n        this.signIn = this.signIn.bind(this);\r\n        this.signUp = this.signUp.bind(this);\r\n    }\r\n\r\n    signIn(payload) {\r\n        console.log(payload);\r\n        this.props.signIn(payload).then(() => {\r\n\r\n        });\r\n    }\r\n    signUp(payload) {\r\n        console.log(payload);\r\n        this.props.signUp(payload).then(() => {\r\n            this.setState({\r\n                isSignIn: true\r\n            })\r\n        });\r\n    }\r\n    handleScroll = (e) => {\r\n        // if (e.target.classList && e.target.classList.contains(\"on-scrollbar\") === false) {\r\n        //     e.target.classList.add(\"on-scrollbar\");\r\n        // }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"main-container\">\r\n                {/* {window.addEventListener('scroll', this.handleScroll, true)} */}\r\n                {this.props.loginInfo && this.props.loginInfo.data ? null :\r\n                    <div className=\"signin-signup-div\">\r\n                        <button onClick={e => { this.setState({ isSignIn: true }) }}>SignIn</button>\r\n                        <button onClick={e => { this.setState({ isSignIn: false }) }}>SignUp</button>\r\n                    </div>\r\n                }\r\n                {this.props.loginInfo && this.props.loginInfo.data ?\r\n                    <ChatContainer\r\n                        loginInfo={this.props.loginInfo}\r\n                    />\r\n                    : (this.state.isSignIn ?\r\n                        <Login signIn={this.signIn} />\r\n                        :\r\n                        <SignUp signUp={this.signUp} />\r\n                    )\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        loginInfo: state.loginInfo\r\n    }\r\n}\r\nfunction mapDispatchToProps(dispatch) {\r\n    return {\r\n        dispatch,\r\n        signIn: (payload) => dispatch(signInAPI(payload)),\r\n        signUp: (payload) => dispatch(signUpAPI(payload))\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps, null, { pure: false })(MainContainer);","import React from 'react';\nimport './App.css';\nimport MainContainer from './Container/MainContainer';\n\nclass App extends React.Component {\n\n\n  render() {\n    return (\n      <div>\n        <MainContainer />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","import { ChatConstants } from \"../../Utils/Constansts\";\r\nimport { StoreConstants } from \"../StoreConstants\"\r\n\r\nexport function fetchChatsReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case StoreConstants.FETCH_CHATS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isError: false,\r\n                data: []\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_CHATS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(action.response)\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_CHATS_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                data: [],\r\n                message: action.failedMessage\r\n            };\r\n        }\r\n        case StoreConstants.MSG_SEND_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(upSertChat(state.data,action.response))\r\n            };\r\n        }\r\n        case StoreConstants.MSG_SEND_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                message: action.failedMessage\r\n            };\r\n        }\r\n        case StoreConstants.GROUP_MSG_SEND_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(upSertGroupChat(state.data,action.response))\r\n            };\r\n        }\r\n        case StoreConstants.GROUP_MSG_SEND_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                message: action.failedMessage\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_GROUP_CHATS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(addGroupMessegesToChat(state.data,action.response))\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_GROUP_CHATS_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                message: action.failedMessage\r\n            };\r\n        }case StoreConstants.CREATE_GROUP_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(addGroupMessegesToChat(state.data,action.response))\r\n            };\r\n        }\r\n        case StoreConstants.CREATE_GROUP_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                message: action.failedMessage\r\n            };\r\n        }\r\n        case StoreConstants.RECIVE_GROUP_CHAT_MSG_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: sortChats(upSertGroupChat(state.data,action.response))\r\n            };\r\n        }\r\n        case StoreConstants.RECIVE_CHAT_MESSAGE_TYPING:{\r\n            return{\r\n                ...state,\r\n                data: chatMessageTypingStart(state.data,action.response)\r\n            }\r\n        }\r\n        case StoreConstants.CHAT_MESSAGE_TYPING_STOP:{\r\n            return{\r\n                ...state,\r\n                data: chatMessageTypingStop(state.data,action.response)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport function upSertChat(array, chat) {\r\n    if (array && array.length) {\r\n        const i = array.findIndex(_item => _item.chatId === chat.chatId);\r\n        if (i > -1){\r\n            array[i].chatMessages.push(chat.chatMessages[0]);\r\n        }  else{\r\n            array.push(chat);\r\n        } \r\n        return array;\r\n    }else{\r\n        return [chat];\r\n    }\r\n}\r\n\r\nexport function upSertGroupChat(array, chat) {\r\n    if (array && array.length) {\r\n        const i = array.findIndex(_item => _item.chatRoomId === chat.chatRoomId);\r\n        if (i > -1){\r\n            array[i].chatMessages.push(chat.chatMessages[0]);\r\n        }  else{\r\n            array.push(chat);\r\n        } \r\n        return array;\r\n    }else{\r\n        return [chat];\r\n    }\r\n}\r\n\r\nexport function addGroupMessegesToChat(chats,groups){\r\n    if(chats && chats.length){\r\n        var newArray = chats.concat(groups);\r\n        return newArray;\r\n    }else{\r\n        return [groups];\r\n    }\r\n}\r\nexport function chatMessageTypingStart(array,currentChat){\r\n    if(currentChat.chatType === ChatConstants.USER){\r\n        const i = array.findIndex(_item => _item.chatId === currentChat.id);\r\n        if (i > -1){            \r\n            array[i] = {\r\n                ...array[i],\r\n                typing:{\r\n                   ...currentChat,isTyping:true\r\n                }\r\n            };\r\n        }\r\n        return array;\r\n    }else{\r\n        const i = array.findIndex(_item => _item.chatRoomId === parseInt(currentChat.id));\r\n        if (i > -1){            \r\n            array[i] = {\r\n                ...array[i],\r\n                typing:{\r\n                   ...currentChat,isTyping:true\r\n                }\r\n            };\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\r\nexport function chatMessageTypingStop(array,currentChat){\r\n    if(currentChat.chatType === ChatConstants.USER){\r\n        const i = array.findIndex(_item => _item.chatId === currentChat.id);\r\n        if (i > -1){            \r\n            array[i] = {\r\n                ...array[i],\r\n                typing:{\r\n                    ...currentChat,isTyping:false\r\n                }\r\n            };\r\n        }\r\n        return array;\r\n    }else{\r\n        const i = array.findIndex(_item => _item.chatRoomId === parseInt(currentChat.id));\r\n        if (i > -1){            \r\n            array[i] = {\r\n                ...array[i],\r\n                typing:{\r\n                    ...currentChat,isTyping:false\r\n                }\r\n            };\r\n        }\r\n        return array;\r\n    }\r\n}\r\n\r\nexport function sortChats(chats){\r\n    if(chats && chats.length){\r\n        for(var i=0;i<chats.length;i++){\r\n            chats[i].chatMessages = chats[i].chatMessages.sort((a,b) => new Date(b.messageTimestamp) - new Date(a.messageTimestamp));\r\n            chats[i] = {\r\n              ...chats[i],\r\n              \"lastTimestamp\": chats[i].chatMessages.length ? chats[i].chatMessages[0].messageTimestamp : chats[i].createdTimestamp,\r\n              \"lastMessage\": chats[i].chatMessages.length ? chats[i].chatMessages[0].message : \"\",\r\n              \"lastMessageSentBy\": chats[i].chatMessages.length ? chats[i].chatMessages[0].senderUserId : \"\"\r\n            }\r\n            chats[i].chatMessages = chats[i].chatMessages.sort((a,b) => new Date(a.messageTimestamp) - new Date(b.messageTimestamp));\r\n          }\r\n          chats = chats.sort((a,b)=> new Date(b.lastTimestamp) - new Date(a.lastTimestamp));  \r\n    }\r\n    return chats;\r\n    \r\n}","import { combineReducers } from 'redux';\r\nimport { chatMessagesReducer } from './Reducer/ChatMessagesReducer';\r\nimport { fetchChatsReducer } from './Reducer/ChatReducer';\r\nimport { loginReducer } from \"./Reducer/LoginReducer\"\r\nimport { usersReducer } from './Reducer/UsersReducer';\r\nconst rootReducer = combineReducers({\r\n    loginInfo: loginReducer,\r\n    users: usersReducer,\r\n    chatMessages: chatMessagesReducer,\r\n    chats: fetchChatsReducer\r\n})\r\n\r\nexport default rootReducer;","import { StoreConstants } from \"../StoreConstants\"\r\n\r\nexport function loginReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case StoreConstants.LOGIN_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLogin: false,\r\n                data: null,\r\n                loginType: null\r\n            };\r\n        }\r\n        case StoreConstants.LOGIN_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLogin: true,\r\n                data: action.response\r\n            };\r\n        }\r\n        case StoreConstants.LOGIN_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLogin: false,\r\n                data: action.response,\r\n                message:action.failedMessage\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}","import { StoreConstants } from \"../StoreConstants\"\r\n\r\nexport function usersReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case StoreConstants.FETCH_USERS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isError: false,\r\n                data: null\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_USERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: action.response\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_USERS_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                data: null,\r\n                message:action.failedMessage\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}","import { StoreConstants } from \"../StoreConstants\"\r\n\r\nexport function chatMessagesReducer(state = {}, action) {\r\n    switch (action.type) {\r\n        case StoreConstants.FETCH_CHAT_MSGS_LOADING: {\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                isError: false,\r\n                data: null\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_CHAT_MSGS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: false,\r\n                data: action.response\r\n            };\r\n        }\r\n        case StoreConstants.FETCH_CHAT_MSGS_FAILED: {\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isError: true,\r\n                data: null,\r\n                message:action.failedMessage\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n\r\n\r\n    }\r\n\r\n}","import rootReducer from './index';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from \"redux-thunk\";\r\nimport { createLogger } from \"redux-logger\";\r\n// const appStore = createStore(rootReducer,window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\nconst middleware = [thunk];\r\n// eslint-disable-next-line no-undef\r\nif (process.env.NODE_ENV !== \"production\") {\r\n\tmiddleware.push(createLogger());\r\n}\r\n\r\nconst appStore = createStore(\r\n\trootReducer,\r\n\t{},\r\n\tapplyMiddleware(...middleware)\r\n);\r\nexport default appStore;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport appStore from './Store/ConfigureStore';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <Provider store={appStore}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}